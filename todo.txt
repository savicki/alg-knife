
+ RTP generator, so expectations can be tested
- support SIPP xml scenarios
- support dialog?
- send schemas, e.g. {10,24,12,40} for 10+24+12+40 byte-long msg, so ring buffers can be pin-tested. As well as stream helpers.
+ v support
+ support placeholders in text messages, e.g. {listen_ip}:{listen_port}, {iter_num}
- assert for SIP: "Content-length: xxx"
+ can't exit after RTP flows (open sockets??)
+ send several "opening" RTP packets
+ TCP: (on client) no recv from server, even loopback. But wireshark show incoming msg (when visavi not loopback)!
+ RTP socket - eaddrinuse
+ DNS
+ SCCP


{{proto}}
{{local_ip}}, {{local_port}}
{{remote_ip}}, {{remote_port}}
{{iter_num}}, {{thread_num}}

Samples:

	tcp 127.0.0.1 9001 "\x0000" "rep: 3" "delay: 2" "wmap: "  "rmap: "
	"\x000000" / "filehex: sccp_tcp_smt.hex" 	"wmap: sccp_tcp_smt.wmap" "rmap: sccp_tcp_smt.rmap"
	"abc" / "filetxt: sip_invite.txt" 			"rmap: sip_invite.rmap"


	"rtp: {{rtp_proto}} {{local_ip}} {{iter_num+1024}} {{rtp_remote_ip}} {{rtp_remote_port}} emit_data"


CLIENT 				 SERVER

build msg
send msg  ---------> recv msg
                     parse msg *

                     build msg
recv msg  <--------- send msg **
parse msg *, **

REPEAT

  [tmpl]                                   [to send]
sendBuffer [+.wmap] --> compSendBuffer --> sendBuffer
           [+.rmap] --> compRecvBuffer + recvBuffer --> env

"build msg" - env.vars to fields
"parse msg" - fields to env.vars
* - ready to accept RTP flow (start listening)
** - ready initiate RTP flow


send_buf: 			"xxx {{local_ip + iter_num + 2000}} zzz {{local_ip + iter_num + 2001}} qqq"
send_buf_compiled:  "xxx {{func_1}} zzz {{func_2}} qqq"
					+
	"func_1" : function(env) { return eval("env.local_ip + env.iter_num + 2000") }
	"func_2" : function(env) { return eval("env.local_ip + env.iter_num + 2001") }

get eval exp.:
	"local_ip + iter_num + 2000" => "envArg.local_ip + envArg.iter_num + 2000"
build eval func:
	"func_1" : function(envArg) { return __toBytes( eval( "envArg.local_ip + envArg.iter_num + 2000" ) ) }
run:
	"xxx {{func_1}} zzz {{func_2}} qqq"

send_buf_compiled = 
{
	"use_native" : false,
	"compiled"   : "",
	"funcs" 	 : {},
	"isHex" 	 : false
}

1) send_buf <== .txt, .hex
2) send_buf_compiled = compile_write( send_buf, write_map /* for hex */ ) // if placeholder unknown, it will raise exception at *run* time
3) send_buf = run_write( send_buf_compiled, env )


"file: sip_tcp_invite.txt" can contain {{xxx}} placehodlers, e.g.:

INVITE sip:uac@{{remote_ip}}:5060 SIP/2.0
Via: SIP/2.0/TCP {{local_ip}}:5060;branch=z9hG4bK-16003-1-0
From: sipp <sip:sipp@{{local_ip}}:5060>;tag=16003SIPpTag001
To: uac <sip:uac@{{remote_ip}}:5060>
Call-ID: 1-16003@{{local_ip}}
CSeq: 1 INVITE
Contact: sip:sipp@{{local_ip}}:5060
Max-Forwards: 70
Subject: Performance Test
Content-Type: application/sdp
Content-Length:   131

v=0
o=user1 53655765 2353687637 IN IP4 {{local_ip}}
s=-
c=IN IP4 {{local_ip}}
t=0 0
m=audio {{iter_num+1024}} RTP/AVP 0
a=rtpmap:0 PCMU/8000


"filehex: sccp_tcp_smt.txt" can't contain placeholders, instead, specify them as offset:len:value in "writehex: " file, "readhex: " to 
"filetxt: sip_invite.txt", "readtxt: "

ip2intLE
ip2intBE

"writehex: "
> # offset:len:value
> 16:4:{{ip2intLE(local_ip)}}
> 32:4:{{iter_num+1024}}

"readhex: "
> # offset:len:value
> 16:4:{{rtp_remote_ip}}
> 32:4:{{rtp_remote_port}}

"readtxt: "
{{rtp_remote_ip}}
c=IN IP4 (\d+.\d+.\d+.\d+)
{{rtp_remote_port}}
m=audio (\d) RTP/AVP 0

INVITE sip:uac@{{(\d+.\d+.\d+.\d+)}{{remote_ip}}:5060 SIP/2.0
Via: SIP/2.0/TCP {{local_ip}}:5060;branch=z9hG4bK-16003-1-0
From: sipp <sip:sipp@{{local_ip}}:5060>;tag=16003SIPpTag001
To: uac <sip:uac@{{remote_ip}}:5060>
Call-ID: 1-16003@{{local_ip}}
CSeq: 1 INVITE
Contact: sip:sipp@{{local_ip}}:5060
Max-Forwards: 70
Subject: Performance Test
Content-Type: application/sdp
Content-Length:   131





send_buf updated (via "writehex:" or placeholders directly in txt) each time before sending on new iteration

replace_map_txt = 
{
	line:offset:func,
	line:offset:func,
}

replace_map_hex = 
{
	byte_offset:len:func,
	byte_offset:len:func,
}

applyWriteMap(map, iter, tmpl) 	// update fields before sending msg
applyReadMap(map, msg, envVars)	// fetch fields into env vars


Cons:
- hex parser can't handle size-variable responses (SMT, ORCA)
- DNS support?


[ samples ]

node nodejs/server.js  udp 127.0.0.1 9001 "\x0000000000000000" "wmap: ./samples/sccp/sccp_smt.wmap" "rmap: ./samples/sccp/sccp_smt.rmap"
node nodejs/client.js  udp 127.0.0.1 9001 "\x0000000000000000" "wmap: ./samples/sccp/sccp_smt.wmap" "rmap: ./samples/sccp/sccp_smt.rmap" "rep: 1" "delay: 3"

node nodejs/server.js  udp 127.0.0.1 9001 "server: {{local_port}}"
node nodejs/client.js  udp 127.0.0.1 9001 "client: {{local_port}}"

node nodejs/emul_rtp.js udp 127.0.0.1 9001 127.0.0.1 9000
node nodejs/emul_rtp.js udp 127.0.0.1 9000 127.0.0.1 9001 "xx"

node nodejs/client.js udp 127.0.0.1 9001 "\x0000000000000000" "wmap: ./samples/sccp/sccp_smt.wmap" "rep: 1" "delay: 3" "rmap: ./samples/sccp/sccp_smt.rmap"  "rtp: {{proto}} 127.0.0.1 9001 {{remote_ip}} {{remote_port}} 123"




node nodejs/server.js udp 127.0.0.1 9001 "\x0000000000000000" "rmap: ./samples/sccp/sccp_smt.rmap" "wmap: ./samples/sccp/sccp_smt.wmap" "delay: 3" "rtp: udp {{rtp_local_ip}} {{rtp_local_port}} {{rtp_remote_ip}} {{rtp_remote_port}} "

node nodejs/client.js udp 127.0.0.1 9001 "\x0000000000000000" "wmap: ./samples/sccp/sccp_smt.wmap" "rep: 10" "delay: 3" "rmap: ./samples/sccp/sccp_smt.rmap"  "rtp: udp {{rtp_local_ip}} {{rtp_local_port}} {{rtp_remote_ip}} {{rtp_remote_port}} 123"



node nodejs/server.js tcp 127.0.0.1 9001 "\x0000000000000000" "rmap: ./samples/sccp/sccp_smt.rmap" "wmap: ./samples/sccp/sccp_smt.wmap" "delay: 3" "rtp: udp {{rtp_local_ip}} {{rtp_local_port}} {{rtp_remote_ip}} {{rtp_remote_port}} "

node nodejs/client.js tcp 127.0.0.1 9001 "\x0000000000000000" "wmap: ./samples/sccp/sccp_smt.wmap" "rep: 10" "delay: 3" "rmap: ./samples/sccp/sccp_smt.rmap"  "rtp: udp {{rtp_local_ip}} {{rtp_local_port}} {{rtp_remote_ip}} {{rtp_remote_port}} 123"



[ 27 sep ]

nodejs client.js tcp 10.10.10.4 5060 "file: ./../samples/SIP/sip_tcp_invite.tmpl" "rep: 2" "delay: 2"

